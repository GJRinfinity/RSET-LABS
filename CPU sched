#include <stdio.h> 
#include <stdlib.h> 
int b[50],n,wt[50],ta[50],i,j,p[50],pr[50],tq,b1[50]; 
double awt,ata; 
void input() 
 { 
  printf("Enter the number of processes:"); 
  scanf("%d",&n); 
  for(i=0;i<n;i++) 
    { 
    p[i]=i+1; 
    printf("burst time of P%d:",p[i]); 
    scanf("%d",&b[i]); 
    } 
 } 
void display() 
        { 
           printf("\nPNO\t BURST TIME\t WAITING TIME\t TURNAROUND TIME\n"); 
           awt=0.0; 
           ata=0.0; 
           for(i=0;i<n;i++) 
              { 
             awt+=wt[i]; 
             ata+=ta[i]; 
             printf("\nP%d\t %d\t\t %d\t\t %d",p[i],b[i],wt[i],ta[i]); 
           } 
           awt=awt/n; 
           ata=ata/n; 
           printf("\nAverage waiting time:%lf",awt); 
           printf("\nAverage turnaround time:%lf",ata); 
        } 
void fcfs() 
{ 
        int x=0; 
        for(i=0;i<n;i++) 
         { 
           wt[i]=x; 
           ta[i]=x+b[i]; 
           x=ta[i]; 
        } 
} 
void swap() 
 { 
                int temp; 
                for(i=0;i<n-1;i++) 
                  { 
                      for(j=0;j<n-i-1;j++) 
                         { 
                         if(p[j]>p[j+1]) 
                          { 
                                temp=b[j]; 
                                b[j]=b[j+1]; 
                                b[j+1]=temp; 
                                temp=p[j]; 
                                p[j]=p[j+1]; 
                                p[j+1]=temp; 
                                temp=wt[j]; 
                                wt[j]=wt[j+1]; 
                                wt[j+1]=temp; 
                                temp=ta[j]; 
                                ta[j]=ta[j+1]; 
                                ta[j+1]=temp; 
                         } 
                        } 
                 } 
   } 
void sjf() 
        { 
                int temp; 
                for(i=0;i<n-1;i++) 
                    for(j=0;j<n-i-1;j++) 
                            { 
                         if(b[j]>b[j+1]) 
                          { 
                                temp=b[j]; 
                                b[j]=b[j+1]; 
                                b[j+1]=temp; 
                                temp=p[j]; 
                                p[j]=p[j+1]; 
                                p[j+1]=temp; 
                         } 
                        } 
                 fcfs(); 
                swap(); 
       } 
void prr() 
{ 
               int temp; 
               printf("Enter the number of priorities:\n"); 
  		for(i=0;i<n;i++) 
    		{ 
    		printf("priority of P%d:",p[i]); 
   		 scanf("%d",&pr[i]); 
               } 
                for(i=0;i<n-1;i++) 
                 { 
                  for(j=0;j<n-i-1;j++) 
                        { 
                         if(pr[j]>pr[j+1]) 
                          { 
                                temp=b[j]; 
                                b[j]=b[j+1]; 
                                b[j+1]=temp; 
                                temp=p[j]; 
                                p[j]=p[j+1]; 
                                p[j+1]=temp; 
                                temp=pr[j]; 
                                pr[j]=pr[j+1]; 
                                pr[j+1]=temp; 

                         } 
                        } 
                 } 
                 fcfs(); 
                 swap(); 
} 

void rr() 
{ 
  int tq,x=0,tem[50],rq[50],j,at[50],lar,temp,flag=0,cnt=0;   
   printf("Enter the time quantum:"); 
   scanf("%d",&tq); 
   for(i=0;i<n;i++)           //accepting the arival times
   {
    printf("Enter the arrival time of P%d:",p[i]);
    scanf("%d",&at[i]);
   }
   for(i=0;i<n-1;i++)            //sorting processes based on the arrival time
                 { 
                  for(j=0;j<n-i-1;j++) 
                        { 
                         if(at[j]>at[j+1]) 
                          { 
                                temp=b[j]; 
                                b[j]=b[j+1]; 
                                b[j+1]=temp; 
                                temp=p[j]; 
                                p[j]=p[j+1]; 
                                p[j+1]=temp; 
                                temp=at[j]; 
                                at[j]=at[j+1]; 
                                at[j+1]=temp; 

                         } 
                        } 
                 } 
   for(i=0;i<n;i++) 
     {
     tem[i]=0;     
     b1[i]=b[i];    //storing the  burst time to temporary array
     }
    rq[cnt]=0;     //ready queue initialised with the first process
    lar=0;
    cnt++;
    while(cnt>0)    //repeat process untill the ready queue is empty
     {
                  j=rq[0];
                  cnt--;    //poping out  element at zeroth index
                  for(i=0;i<cnt;i++)   //shifting elements to left to make up for the deleted process
                      rq[i]=rq[i+1];
              	  if(b1[j]>=tq)       //if burst time of process>time quantum
               	   {
                                 wt[j]=x-tem[j]-at[j];
                 		 ta[j]=x+tq-at[j]; 
                                 tem[j]+=tq;
				 x+=tq;
                		 b1[j]-=tq; 
               	  } 
              	 else 			//burst time of process<time quantum
              	   { 
                		wt[j]=x-tem[j]-at[j];
				ta[j]=x+b1[j]-at[j];
				tem[j]+=b1[j];
				x+=b1[j]; 
                		b1[j]=0; 
                 } 
              if(flag==0)    //if all the processes have not yet arrived
                  {
                  for(i=lar+1;i<n;i++)   //to check if any process arrived in between
                     {
			if(at[i]<=x)
			  {
 			   rq[cnt++]=i;
			   if(i>lar)
                             lar=i;  //lar  stores the last element that arrived
			  }
                     }
                   if(x>=at[n-1])   //if all the processes have arrived,then flag is set to 1
                      flag=1;
                     if(b1[j]>0)
                       rq[cnt++]=j;
                 }
               else
                   {
                      if(b1[j]>0)
                       rq[cnt++]=j;
                   }
        }
     swap(); 
 }
void main() 
{ 
 int ch; 
    do 
      { 
         printf("\nMENU\n********\n1.FCFS \n2.SJF\n3.ROUND ROBIN\n4.PRIOIRITY\n5.exit"); 
         printf("\nEnter the choice:"); 
         scanf("%d",&ch); 
         switch(ch) 
         { 
           case 1: 
              input(); 
             fcfs(); 
             display(); 
              break; 
           case 2: 
              input(); 
              sjf(); 
              display(); 
              break; 
           case 3: 
              input(); 
              rr(); 
              display(); 
              break; 
           case 4: 
              input(); 
              prr(); 
              display(); 
               break; 
         case 5: 
              break; 
         default: 
            printf("Invalid enrty"); 
        } 
     }while(ch!=5); 
}
